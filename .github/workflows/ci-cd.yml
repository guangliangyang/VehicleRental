name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_RESOURCE_GROUP: rg-vehicle-rental-dev
  AZURE_LOCATION: eastus
  REGISTRY_NAME: crvehiclerentaldev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/web/vehicle-rental-web/package-lock.json

    # Build and test backend
    - name: Restore .NET dependencies
      run: dotnet restore src/services/VehicleRentalSystem.sln

    - name: Build .NET solution
      run: dotnet build src/services/VehicleRentalSystem.sln --no-restore --configuration Release

    - name: Run .NET tests
      run: dotnet test tests/unit/FleetService.UnitTests --configuration Release --no-build --verbosity normal

    # Build frontend
    - name: Install npm dependencies
      run: npm ci
      working-directory: src/web/vehicle-rental-web

    - name: Build React app
      run: npm run build
      working-directory: src/web/vehicle-rental-web

    # Publish backend for deployment
    - name: Publish .NET API
      run: dotnet publish src/services/FleetService/FleetService.Api/FleetService.Api.csproj --configuration Release --output ./publish

    # Upload build artifacts
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: ./publish/

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/web/vehicle-rental-web/build/

  infrastructure-base:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Create Terraform Backend Storage (idempotent)
    - name: Create Terraform Backend Storage
      run: |
        # Create resource group for terraform state (if not exists)
        az group create --name rg-terraform-state --location eastus --output none || true

        # Create storage account for terraform state (if not exists)
        az storage account create \
          --name stterraformvehicle \
          --resource-group rg-terraform-state \
          --location eastus \
          --sku Standard_LRS \
          --output none || true

        # Create container for terraform state (if not exists)
        az storage container create \
          --name tfstate \
          --account-name stterraformvehicle \
          --output none || true

    # Register Azure resource providers
    - name: Register Azure Resource Providers
      run: |
        echo "Registering required Azure resource providers..."
        az provider register --namespace Microsoft.App --wait
        az provider register --namespace Microsoft.OperationalInsights --wait
        echo "Resource providers registered successfully"

    # Terraform Init
    - name: Terraform Init
      run: terraform init
      working-directory: terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Terraform Plan (base infrastructure only)
    - name: Terraform Plan Base Infrastructure
      run: terraform plan -target=azurerm_resource_group.main -target=azurerm_container_registry.main -target=azurerm_static_web_app.frontend -target=azurerm_log_analytics_workspace.main -target=azurerm_application_insights.main -target=azurerm_key_vault.main -target=azurerm_container_app_environment.main
      working-directory: terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_resource_group_name: ${{ env.AZURE_RESOURCE_GROUP }}
        TF_VAR_location: ${{ env.AZURE_LOCATION }}
        TF_VAR_registry_name: ${{ env.REGISTRY_NAME }}
        TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_cosmos_endpoint: ${{ secrets.COSMOS_ENDPOINT }}
        TF_VAR_cosmos_key: ${{ secrets.COSMOS_KEY }}
        TF_VAR_cosmos_database_id: ${{ secrets.COSMOS_DATABASE_ID }}
        TF_VAR_cosmos_container_id: ${{ secrets.COSMOS_CONTAINER_ID }}

    # Intelligent Resource Import (for idempotent execution)
    - name: Import Existing Base Resources
      run: |
        # Set environment variables for terraform commands
        export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
        export TF_VAR_resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}
        export TF_VAR_location=${{ env.AZURE_LOCATION }}
        export TF_VAR_registry_name=${{ env.REGISTRY_NAME }}
        export TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }}
        export TF_VAR_client_secret=${{ secrets.AZURE_CLIENT_SECRET }}
        export TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }}
        export TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
        export TF_VAR_cosmos_endpoint="${{ secrets.COSMOS_ENDPOINT }}"
        export TF_VAR_cosmos_key="${{ secrets.COSMOS_KEY }}"
        export TF_VAR_cosmos_database_id="${{ secrets.COSMOS_DATABASE_ID }}"
        export TF_VAR_cosmos_container_id="${{ secrets.COSMOS_CONTAINER_ID }}"

        # Check and import existing base resources
        echo "Checking for existing base resources..."

        # Import Resource Group if exists
        if az group show --name "${{ env.AZURE_RESOURCE_GROUP }}" >/dev/null 2>&1; then
          echo "Resource Group exists, importing..."
          terraform import azurerm_resource_group.main "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}" || true
        fi

        # Import Container Registry if exists
        if az acr show --name "${{ env.REGISTRY_NAME }}" >/dev/null 2>&1; then
          echo "Container Registry exists, importing..."
          terraform import azurerm_container_registry.main "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/${{ env.REGISTRY_NAME }}" || true
        fi

        # Import Static Web App if exists
        SWA_ID=$(az staticwebapp list --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query "[?name=='swa-vehicle-rental-dev'].id" -o tsv 2>/dev/null || echo "")
        if [ ! -z "$SWA_ID" ]; then
          echo "Static Web App exists, importing..."
          terraform import azurerm_static_web_app.frontend "$SWA_ID" || true
        fi

        # Import Log Analytics Workspace if exists
        if az monitor log-analytics workspace show --workspace-name "law-vehicle-rental-dev" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" >/dev/null 2>&1; then
          echo "Log Analytics Workspace exists, importing..."
          terraform import azurerm_log_analytics_workspace.main "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.OperationalInsights/workspaces/law-vehicle-rental-dev" || true
        fi

        # Import Application Insights if exists
        if az monitor app-insights component show --app "appi-vehicle-rental-dev" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" >/dev/null 2>&1; then
          echo "Application Insights exists, importing..."
          terraform import azurerm_application_insights.main "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Insights/components/appi-vehicle-rental-dev" || true
        fi

        # Import Key Vault if exists
        if az keyvault show --name "kv-vehicle-rental-dev" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" >/dev/null 2>&1; then
          echo "Key Vault exists, importing..."
          terraform import azurerm_key_vault.main "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.KeyVault/vaults/kv-vehicle-rental-dev" || true
        fi

        echo "Base resource import phase completed."
      working-directory: terraform

    # Terraform Apply (base infrastructure only)
    - name: Terraform Apply Base Infrastructure
      run: terraform apply -auto-approve -target=azurerm_resource_group.main -target=azurerm_container_registry.main -target=azurerm_static_web_app.frontend -target=azurerm_log_analytics_workspace.main -target=azurerm_application_insights.main -target=azurerm_key_vault.main -target=azurerm_container_app_environment.main
      working-directory: terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_resource_group_name: ${{ env.AZURE_RESOURCE_GROUP }}
        TF_VAR_location: ${{ env.AZURE_LOCATION }}
        TF_VAR_registry_name: ${{ env.REGISTRY_NAME }}
        TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_cosmos_endpoint: ${{ secrets.COSMOS_ENDPOINT }}
        TF_VAR_cosmos_key: ${{ secrets.COSMOS_KEY }}
        TF_VAR_cosmos_database_id: ${{ secrets.COSMOS_DATABASE_ID }}
        TF_VAR_cosmos_container_id: ${{ secrets.COSMOS_CONTAINER_ID }}

  build-and-push-image:
    needs: infrastructure-base
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    # Download backend artifacts
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend-build

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Build and push Docker image
    - name: Build and push Docker image
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/fleet-api:${{ github.sha }} -f Dockerfile .
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/fleet-api:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/fleet-api:latest
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/fleet-api:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/fleet-api:latest

  deploy-container:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Terraform Init
    - name: Terraform Init
      run: terraform init
      working-directory: terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Terraform Plan (container app only)
    - name: Terraform Plan Container App
      run: terraform plan -target=azurerm_container_app.api -target=azurerm_key_vault_access_policy.container_app
      working-directory: terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_resource_group_name: ${{ env.AZURE_RESOURCE_GROUP }}
        TF_VAR_location: ${{ env.AZURE_LOCATION }}
        TF_VAR_registry_name: ${{ env.REGISTRY_NAME }}
        TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_cosmos_endpoint: ${{ secrets.COSMOS_ENDPOINT }}
        TF_VAR_cosmos_key: ${{ secrets.COSMOS_KEY }}
        TF_VAR_cosmos_database_id: ${{ secrets.COSMOS_DATABASE_ID }}
        TF_VAR_cosmos_container_id: ${{ secrets.COSMOS_CONTAINER_ID }}

    # Import Container App if exists
    - name: Import Container App
      run: |
        # Set environment variables for terraform commands
        export ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
        export ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
        export TF_VAR_resource_group_name=${{ env.AZURE_RESOURCE_GROUP }}
        export TF_VAR_location=${{ env.AZURE_LOCATION }}
        export TF_VAR_registry_name=${{ env.REGISTRY_NAME }}
        export TF_VAR_client_id=${{ secrets.AZURE_CLIENT_ID }}
        export TF_VAR_client_secret=${{ secrets.AZURE_CLIENT_SECRET }}
        export TF_VAR_tenant_id=${{ secrets.AZURE_TENANT_ID }}
        export TF_VAR_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}
        export TF_VAR_cosmos_endpoint="${{ secrets.COSMOS_ENDPOINT }}"
        export TF_VAR_cosmos_key="${{ secrets.COSMOS_KEY }}"
        export TF_VAR_cosmos_database_id="${{ secrets.COSMOS_DATABASE_ID }}"
        export TF_VAR_cosmos_container_id="${{ secrets.COSMOS_CONTAINER_ID }}"

        # Import Container App if exists
        if az containerapp show --name "ca-vehicle-rental-api-dev" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" >/dev/null 2>&1; then
          echo "Container App exists, importing..."
          terraform import azurerm_container_app.api "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.App/containerApps/ca-vehicle-rental-api-dev" || true
        fi
      working-directory: terraform

    # Terraform Apply (container app only)
    - name: Terraform Apply Container App
      run: terraform apply -auto-approve -target=azurerm_container_app.api -target=azurerm_key_vault_access_policy.container_app
      working-directory: terraform
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_resource_group_name: ${{ env.AZURE_RESOURCE_GROUP }}
        TF_VAR_location: ${{ env.AZURE_LOCATION }}
        TF_VAR_registry_name: ${{ env.REGISTRY_NAME }}
        TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
        TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_cosmos_endpoint: ${{ secrets.COSMOS_ENDPOINT }}
        TF_VAR_cosmos_key: ${{ secrets.COSMOS_KEY }}
        TF_VAR_cosmos_database_id: ${{ secrets.COSMOS_DATABASE_ID }}
        TF_VAR_cosmos_container_id: ${{ secrets.COSMOS_CONTAINER_ID }}

  deploy-frontend:
    needs: [build-and-test, infrastructure-base]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    # Download frontend artifacts
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Get Static Web App deployment token
    - name: Get Static Web App Deployment Token
      id: swa-token
      run: |
        SWA_TOKEN=$(az staticwebapp secrets list --name "swa-vehicle-rental-dev" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query "properties.apiKey" -o tsv)
        echo "::add-mask::$SWA_TOKEN"
        echo "token=$SWA_TOKEN" >> $GITHUB_OUTPUT

    # Deploy frontend to Static Web App
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.token }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend-build"
        skip_app_build: true